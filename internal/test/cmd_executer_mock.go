package test

// Don't edit this file.
// This file is generated by gomic 0.4.0.
// https://github.com/suzuki-shunsuke/gomic

import (
	testing "testing"

	gomic "github.com/suzuki-shunsuke/gomic/gomic"
)

type (
	// CmdExecuterMock is a mock.
	CmdExecuterMock struct {
		t                      *testing.T
		name                   string
		CallbackNotImplemented gomic.CallbackNotImplemented
		Impl                   CmdExecuterMockImpl
	}

	// CmdExecuterMockImpl holds functions which implement interface's methods.
	CmdExecuterMockImpl struct {
		Exec func(cmd, dest string) error
	}
)

// NewCmdExecuterMock returns CmdExecuterMock .
func NewCmdExecuterMock(t *testing.T, cb gomic.CallbackNotImplemented) *CmdExecuterMock {
	return &CmdExecuterMock{t: t, CallbackNotImplemented: cb}
}

// Exec is a mock method.
func (mock CmdExecuterMock) Exec(cmd, dest string) error {
	methodName := "Exec" // nolint: goconst
	if mock.Impl.Exec != nil {
		return mock.Impl.Exec(cmd, dest)
	}
	if mock.CallbackNotImplemented != nil {
		mock.CallbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroExec(cmd, dest)
}

// SetFakeExec sets a fake method.
func (mock *CmdExecuterMock) SetFakeExec(r0 error) {
	mock.Impl.Exec = func(cmd, dest string) error {
		return r0
	}
}

// fakeZeroExec is a fake method which returns zero values.
func (mock CmdExecuterMock) fakeZeroExec(cmd, dest string) error {
	var (
		r0 error
	)
	return r0
}
