package test

// Don't edit this file.
// This file is generated by gomic 0.4.0.
// https://github.com/suzuki-shunsuke/gomic

import (
	testing "testing"

	test "github.com/suzuki-shunsuke/go-gencfg/internal/domain"
	gomic "github.com/suzuki-shunsuke/gomic/gomic"
)

type (
	// CodeGeneraterMock is a mock.
	CodeGeneraterMock struct {
		t                      *testing.T
		name                   string
		CallbackNotImplemented gomic.CallbackNotImplemented
		Impl                   CodeGeneraterMockImpl
	}

	// CodeGeneraterMockImpl holds functions which implement interface's methods.
	CodeGeneraterMockImpl struct {
		Exec func(dest, tmpl string, config test.TemplateData) error
	}
)

// NewCodeGeneraterMock returns CodeGeneraterMock .
func NewCodeGeneraterMock(t *testing.T, cb gomic.CallbackNotImplemented) *CodeGeneraterMock {
	return &CodeGeneraterMock{t: t, CallbackNotImplemented: cb}
}

// Exec is a mock method.
func (mock CodeGeneraterMock) Exec(dest, tmpl string, config test.TemplateData) error {
	methodName := "Exec" // nolint: goconst
	if mock.Impl.Exec != nil {
		return mock.Impl.Exec(dest, tmpl, config)
	}
	if mock.CallbackNotImplemented != nil {
		mock.CallbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroExec(dest, tmpl, config)
}

// SetFakeExec sets a fake method.
func (mock *CodeGeneraterMock) SetFakeExec(r0 error) {
	mock.Impl.Exec = func(dest, tmpl string, config test.TemplateData) error {
		return r0
	}
}

// fakeZeroExec is a fake method which returns zero values.
func (mock CodeGeneraterMock) fakeZeroExec(dest, tmpl string, config test.TemplateData) error {
	var (
		r0 error
	)
	return r0
}
